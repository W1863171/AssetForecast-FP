import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import joblib 
from sklearn.preprocessing import OrdinalEncoder, MinMaxScaler

# Load the dataset
file_path = '../AssetForecast/ML/AssetDataRisk.xlsx'
data = pd.read_excel(file_path)

# Drop irrelevant columns (e.g., barcode, riskRating, locationID, impactRating)
data.drop(['barcode', 'riskRating', 'locationID', 'impactRating', 'TypeOfMaintenanceRequired', 'RequiredWithin'], axis=1, inplace=True)

# Select categorical columns
categorical_cols = ['assetType', 'assetCondition', 'assetRepairCategory']

# Encode categorical variables using OrdinalEncoder
encoder = OrdinalEncoder()
data[categorical_cols] = encoder.fit_transform(data[categorical_cols])

# Convert 'installationDate' column to timestamps
data['installationDate'] = pd.to_datetime(data['installationDate']).astype(int) // 10**9  # Convert to Unix timestamp

# Split data into features (X) and target variable (y)
X = data.drop(['riskScore'], axis=1)
y = data['riskScore']

# Apply Min-Max Scaling to features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Split scaled data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Define the hyperparameter grid
param_grid = {
    # Number of trees in the forest
    'n_estimators': [50, 100, 200, 300, 400],
    # Maximum depth of the tree. If None, nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.
    'max_depth': [None, 10, 20],
    # The minimum number of samples required to split an internal node
    'min_samples_split': [2, 5, 10],
    # The minimum number of samples required to be at a leaf node
    'min_samples_leaf': [1, 2, 4],
    # The number of features to consider when looking for the best split
    'max_features': ['auto', 'sqrt', 'log2'],
    # Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree.
    'bootstrap': [True, False],
    # The function to measure the quality of a split
    'criterion': ['absolute_error', 'squared_error', 'friedman_mse', 'poisson']
}

# Create a Random Forest regressor
rf = RandomForestRegressor(random_state=42)

# Perform GridSearchCV
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(X_train, y_train)

# Get the best hyperparameters
best_params = grid_search.best_params_
print("Best Hyperparameters:", best_params)

# Fit the model with the best hyperparameters
best_rf = RandomForestRegressor(**best_params)
best_rf.fit(X_train, y_train)

# Save the encoder
joblib.dump(encoder, '../AssetForecast/ML/RiskScore_ordinal_encoder.pkl')

# Save the trained model to disk
joblib.dump(best_rf , '../AssetForecast/ML/random_forest_modelRiskScore.pkl')

# Save the scaler to disk
joblib.dump(scaler , '../AssetForecast/ML/RiskScore_Scaler.pkl')

# Make predictions on the testing set
y_pred = best_rf.predict(X_test)

# Compute evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R^2 Score:", r2)
