import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import joblib 
from sklearn.preprocessing import OrdinalEncoder, MinMaxScaler


# Load the dataset
file_path = '../AssetForecast/ML/AssetDataRisk.xlsx'
data = pd.read_excel(file_path)

# Drop irrelevant columns (e.g., barcode, riskRating, locationID, impactRating)
data.drop(['barcode', 'riskRating', 'locationID', 'impactRating','TypeOfMaintenanceRequired', 'RequiredWithin'], axis=1, inplace=True)

# Select categorical columns
categorical_cols = ['assetType', 'assetCondition', 'assetRepairCategory']

# Encode categorical variables using OrdinalEncoder
encoder = OrdinalEncoder()
data[categorical_cols] = encoder.fit_transform(data[categorical_cols])

# Convert 'installationDate' column to timestamps
data['installationDate'] = pd.to_datetime(data['installationDate']).astype(int) // 10**9  # Convert to Unix timestamp

# Split data into features (X) and target variable (y)
X = data.drop(['riskScore'], axis=1)
y = data['riskScore']

# Apply Min-Max Scaling to features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Split scaled data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train the Random Forest model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Compute evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R^2 Score:", r2)

# Plotting actual vs predicted values
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Risk Score')
plt.ylabel('Predicted Risk Score')
plt.title('Actual vs Predicted Risk Score (Random Forest)')
plt.show()
